name: HTN Prevention Program CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: htn_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install backend dependencies
        working-directory: ./server
        run: npm ci

      - name: Setup test environment
        working-directory: ./server
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/htn_test" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "PORT=3001" >> .env.test

      - name: Run database migrations
        working-directory: ./server
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/htn_test

      - name: Run backend tests
        working-directory: ./server
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/htn_test

      - name: Generate test coverage
        working-directory: ./server
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/htn_test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./server/coverage
          flags: backend

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        working-directory: ./client
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        working-directory: ./client
        run: pnpm install --frozen-lockfile

      - name: Run frontend linting
        working-directory: ./client
        run: pnpm lint

      - name: Run frontend tests
        working-directory: ./client
        run: pnpm test --run

      - name: Generate test coverage
        working-directory: ./client
        run: pnpm test:coverage --run

      - name: Build frontend
        working-directory: ./client
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: client/dist/

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./client/coverage
          flags: frontend

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: htn_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install root dependencies
        run: npm install

      - name: Install backend dependencies
        working-directory: ./server
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./client
        run: pnpm install --frozen-lockfile

      - name: Setup integration test environment
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/htn_integration" > server/.env
          echo "NODE_ENV=test" >> server/.env
          echo "PORT=3001" >> server/.env
          echo "VITE_API_URL=http://localhost:3001" > client/.env

      - name: Run database setup
        working-directory: ./server
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/htn_integration

      - name: Run integration tests
        run: node test-workflow.js
        timeout-minutes: 10

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-report
          path: test-report.json

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Audit backend dependencies
        working-directory: ./server
        run: npm audit --audit-level=moderate

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Audit frontend dependencies
        working-directory: ./client
        run: pnpm audit --audit-level=moderate

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install frontend dependencies
        working-directory: ./client
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: ./client
        run: pnpm lint

      - name: Check TypeScript (Backend)
        working-directory: ./server
        run: |
          npm ci
          npx tsc --noEmit

  # Deployment (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-audit, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: client/dist/

      - name: Deploy to Railway (Backend)
        if: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          npm install -g @railway/cli
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway up --service backend --directory ./server
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy to Vercel (Frontend)
        if: ${{ secrets.VERCEL_TOKEN }}
        run: |
          npm install -g vercel
          cd client
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Deployment (Staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: client/dist/

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment commands here

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-audit, code-quality]
    if: always()

    steps:
      - name: Notify Slack on Success
        if: ${{ success() && secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ HTN Prevention Program CI/CD Pipeline Passed! All tests successful."}' \
            ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Slack on Failure
        if: ${{ failure() && secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ HTN Prevention Program CI/CD Pipeline Failed! Check the logs for details."}' \
            ${{ secrets.SLACK_WEBHOOK }}

